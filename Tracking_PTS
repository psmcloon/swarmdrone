#!/usr/bin/env python

import rospy
from apriltag_ros.msg import AprilTagDetectionArray
from scipy.spatial.transform import Rotation as R
import numpy as np

def getpose(data):

	translation = [[]]
	rotation = [[]]
	
	Dist = []
	HDNG = []
	position = [[]]

	for detection in data.detections:

		posx = detection.pose.pose.pose.position.x
		posy = detection.pose.pose.pose.position.y
		posz = detection.pose.pose.pose.position.z

		quater_rotx = detection.pose.pose.pose.orientation.x
		quater_roty = detection.pose.pose.pose.orientation.y
		quater_rotz = detection.pose.pose.pose.orientation.z
		quater_rotw = detection.pose.pose.pose.orientation.w

		quatermatrix = [quater_rotx, quater_roty, quater_rotz, quater_rotw]

		rotation = R.from_quat(quatermatrix)
		rotation = rotation.as_matrix()

		translation = [posx, posy, posz]

		pose_r = np.array(rotation)
		pose_t = np.array(translation)
		
		pitch = np.arcsin(-pose_r[2,0]) # pitch dependent on tag orientation #Note: write as a function instead
		roll = np.arcsin(pose_r[2,1]/np.cos(pitch)) # roll depedent on tag orientation
		yaw = np.arcsin(pose_r[1,0]/np.cos(pitch))
		arr1 = np.array(pose_r)
		cpose_r = np.linalg.inv(arr1)
		cpose_t = np.array(-1*pose_t)
		tframepose_t = np.matmul(cpose_r, cpose_t)
		cframepose_t = -tframepose_t # Transfer origin back to drone
		yawarray = np.array([[np.cos(yaw), -np.sin(yaw), 0], [np.sin(yaw), np.cos(yaw), 0], [0, 0, 1]]) # define rotation matrix
		position = np.matmul(np.linalg.inv(yawarray), cframepose_t)
		
		#x coord: position[0], y coord: position[1], z coord: position[2], yaw: -yaw (check signs on yaw, might be wrong)
		
		#print("x: ", np.round(position[0],2), "y: ", np.round(position[1],2), "z: ", np.round(position[2],2), "yaw: ", np.round(-yaw,2))
		
		Dist = np.sqrt(position[0]**2 + position[1]**2) #total distance to travel
		#GR_HDNG = -yaw*180/np.pi #Heading/azimuth angle, clockwise position
		HDNG = np.arctan2(-position[1],position[0])
	return Dist, HDNG, position

def callback(data):
	#offset = 0
  
  GR_Dist, GR_HDNG, position = getpose(data)
  #print("dist: ", GR_Dist, "hdg: ", GR_HDNG)

  #global offset offset may not required if stuck just transitions to landing
  distthresh = 0.1 #+ offset #Distance threshold, possibly can be increased if drone is stuck, remove offset
  hdngthresh = 0.1
  tol = 0.05
  if position[2] == 0:
      print("Transition to Apriltag Search")
  #This current iteration does not account for the existence of the collision avoidance model.
  #Goal is to set heading equal to zero - likely through some form of PID control
  #while np.absolute(GR_HDNG) > 0.5: #Some consideration could be made for acceptable heading threshold/pid control
      #GR_Dist, GR_HDNG, position = getpose(data)
  if GR_HDNG > hdngthresh:
      print("Rotate right ", GR_HDNG)
  elif GR_HDNG < -hdngthresh:
      print("Rotate left ", GR_HDNG)

  if np.absolute(GR_HDNG) <= hdngthresh:
      if GR_Dist > distthresh+tol and position[0] > 0: #Does not account for existence of collision avoidance script yet. Should transition to collision avoidance if an object is detected
        print("Move forward") #may want to set up a waypoint system, i.e saving the dist only at certain points rather than constantly. 
      elif GR_Dist < distthresh-tol or position[0] < 0:
        print("Move backward")

def listener():
	rospy.init_node('listener', anonymous=True)

	rospy.Subscriber('tag_detections', AprilTagDetectionArray, callback)

	rospy.spin()

if __name__ == '__main__':
	listener()
