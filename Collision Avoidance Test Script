#Generalized Collision Avoidance Distance
# import libraries
import RPi.GPIO as GPIO
import time
import numpy as np
# GPIO Modus (BOARD / BCM)
GPIO.setmode(GPIO.BCM)

def distance(GPIOpin):#Sort distance according to GPIOpin, labeled as FOWARD, LEFT, RIGHT, and REAR in pseudocode 
    GPIO_SIG = GPIOpin;
    GPIO.setup(GPIO_SIG, GPIO.OUT)
    GPIO.output(GPIO_SIG, 0)

    time.sleep(0.000002)

    #send trigger signal
    GPIO.output(GPIO_SIG, 1)

    time.sleep(0.000005)

    GPIO.output(GPIO_SIG, 0)

    GPIO.setup(GPIO_SIG, GPIO.IN)

    while GPIO.input(GPIO_SIG) == 0:
        starttime = time.time()

    while GPIO.input(GPIO_SIG) == 1:
        endtime = time.time()

    duration = endtime - starttime
    # Distance is defined as time/2 (there and back) * speed of sound 34000 cm/s 
    distance = (duration*34000)/2/100 #return in meters
 
    return distance


droneLength = 0.26 #meters
F = 17 #Pin 
L = 26 #Pin
R = 6 #Pin
B = 16 #Pin
sleepdur = 0.05
while True:
    try:
        front = distance(F) 
        left = distance(L)
        right = distance(R)
        rear = distance(B)
        if left >= droneLength:
            while front <= droneLength:
                time.sleep(sleepdur)
                print("rotate left 1 degree") # Will rotate continuously until obstacle is no longer detected in path
                front = distance(F) # Update while loop condition
        elif right >= droneLength:
            while front <= droneLength:
                time.sleep(sleepdur)
                print("rotate right 1 degree")
                front = distance(F) 
        elif rear >= droneLength:
            left = distance(L)
            right = distance(R)
            while left < droneLength and rear >= droneLength and right < droneLength: # monitoring sides and rear while reversing
                time.sleep(sleepdur)                
                print("move backwards")
                left = distance(L) 
                right = distance(R) 
                rear = distance(B)
            if left > droneLength:
                while front < droneLength:
                    time.sleep(sleepdur)
                    print("rotate left 1 degree")
                    front = distance(F)
            elif right > droneLength:
                while front < droneLength:
                    time.sleep(sleepdur)
                    print("rotate right 1 degree")
                    front = distance(F)
        else:
            print("stuck, transition to landing")
            break
        #Consideration made for changing altitude, experimentation required

        while (left < droneLength or right < droneLength) and front > droneLength: # Move forward to clear obstacle
            time.sleep(sleepdur)            
            front = distance(F) # Used to detect if there are additional obstacles in front
            left = distance(L) # monitor current obstacle
            right = distance(R) # monitor current obstacle
            print("move foward") 
        print("Transition to tracking")   
    except KeyboardInterrupt:
        print("Measurement stopped by user")
        GPIO.cleanup()
        break
