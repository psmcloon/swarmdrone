#Generalized Collision Avoidance Distance
# import libraries
import RPi.GPIO as GPIO
import time
import numpy as np
# GPIO Modus (BOARD / BCM)
GPIO.setmode(GPIO.BCM)

if __name__ == '__main__': # I think the big issue with this algorithm is that it assumes we want to move forwards, so the drone has to be oriented towards the direction we want to go when we enter the collision avoidance state. Is this intentional?
    try:
        while True:
            droneLength = 26
            F = #Pin front, left, right, back
            L = #Pin
            R = #Pin
            B = #Pin
            front = distance(F)
            if front >= droneLength: 
                print ("move foward") 
            else if front < droneLength
                left = distance(L)
                right = distance(R)
                rear = distance(B)
                if left >= droneLength:
                    while front <= dronelength:
                        print("rotate left 1 degree") # I think this doesn't work, you would want to rotate more, maybe 45 or 90 degrees. 
                        front = distance(F) # why are we measuring front again? Won't it be measured when we loop the script?
                else if right >= droneLength:
                    while front <= droneLength:
                        Print("rotate right 1 degree")
                        front = distance(F) # why are we measuring front again? Won't it be measured when we loop the script?
                else if rear >= dronelength:
                    left = distance(L) # I think this whole block of code will execute quickly enough that we don't need to obtain the same distance measurement more than once. Taking measurements also uses up a lot of time.
                    right = distance(R) # delete this
                    while (left < droneLength and rear >= dronelength) or (right < droneLength and rear >= dronelength): # monitoring sides and rear while reversing
                        print("move backwards")
                        left = distance(L) # delete this
                        right = distance(R) # delete this
                    if left > droneLength:
                        front = distance(F)
                        while front < droneLength:
                            print("rotate left 1 degree")
                            front = distance(F)
                    else if right > droneLength :
                        while front < droneLength:
                            print("rotate right 1 degree")
                else
                    print("stuck")
                #Consideration made for changing altitude, experimentation required

                while left < dronelength or right < droneLength and front > droneLength: # why would we move forward if front < droneLength? I think lines 53-57 maybe can be deleted because it will just move forward during the next iteration
                    front = distance(F)
                    left = distance(L)
                    right = distance(R)
                    print("move foward)"  
 
    except KeyboardInterrupt:
        print("Measurement stopped by user")
        GPIO.cleanup()
                          
                          
def distance(GPIOpin):#Sort distance according to GPIOpin, labeled as FOWARD, LEFT, RIGHT, and REAR in pseudocode 
    GPIO_SIG = GPIOpin;
    GPIO.setup(GPIO_SIG, GPIO.OUT)
    GPIO.output(GPIO_SIG, 0)

    time.sleep(0.000002)

    #send trigger signal
    GPIO.output(GPIO_SIG, 1)

    time.sleep(0.000005)

    GPIO.output(GPIO_SIG, 0)

    GPIO.setup(GPIO_SIG, GPIO.IN)

    while GPIO.input(GPIO_SIG) == 0:
        starttime = time.time()

    while GPIO.input(GPIO_SIG) == 1:
        endtime = time.time()
      
    duration = endtime - starttime
    # Distance is defined as time/2 (there and back) * speed of sound 34000 cm/s 
    distance = (duration*34000)/2
 
    return distance
