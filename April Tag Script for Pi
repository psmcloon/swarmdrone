{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "73b93823",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DRONE COORDINATE SYSTEM DEFINITION: +X towards front of drone, +Y towards right of drone, +Z towards ground\n",
    "\n",
    "# NOTE ABOUT SCRIPT COORDINATES: drone camera is origin, coordinate axis aligned such that XY plane is parallel to the\n",
    "# apriltag paper (which is parallel to the ground) and the Z axis is perpendicular to the apriltag paper.\n",
    "# The X & Y axes are rotated about the z axis such that they are aligned as closely as possible to the drone \n",
    "# coordinate system. Zero yaw occurs when xy axis of script coordinates and apriltag coordinate systems align.\n",
    "# In other words, this coordinate system is the same as the drone coordinate system but accounts for drone pitch/roll\n",
    "# to give consistent readings.\n",
    "\n",
    "# NOTE ABOUT SCRIPT OUTPUTS: position[0] gives x coordinate of apriltag, position[1] gives y coordinate of apriltag,\n",
    "# position[2] gives z coordinate of apriltag, -1*yaw gives yaw angle from drone to apriltag "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "975a7567",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Packages to be installed on the pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7d2634a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: opencv-python in c:\\users\\katok\\anaconda3\\envs\\apriltag37\\lib\\site-packages (4.7.0.72)\n",
      "Requirement already satisfied: numpy>=1.17.0 in c:\\users\\katok\\anaconda3\\envs\\apriltag37\\lib\\site-packages (from opencv-python) (1.21.6)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install opencv-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0092aea0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pupil-apriltags in c:\\users\\katok\\anaconda3\\envs\\apriltag37\\lib\\site-packages (1.0.4.post10)\n",
      "Requirement already satisfied: importlib-metadata in c:\\users\\katok\\anaconda3\\envs\\apriltag37\\lib\\site-packages (from pupil-apriltags) (6.1.0)\n",
      "Requirement already satisfied: pupil-pthreads-win in c:\\users\\katok\\anaconda3\\envs\\apriltag37\\lib\\site-packages (from pupil-apriltags) (2)\n",
      "Requirement already satisfied: numpy in c:\\users\\katok\\anaconda3\\envs\\apriltag37\\lib\\site-packages (from pupil-apriltags) (1.21.6)\n",
      "Requirement already satisfied: typing-extensions>=3.6.4 in c:\\users\\katok\\anaconda3\\envs\\apriltag37\\lib\\site-packages (from importlib-metadata->pupil-apriltags) (4.5.0)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\katok\\anaconda3\\envs\\apriltag37\\lib\\site-packages (from importlib-metadata->pupil-apriltags) (3.15.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pupil-apriltags "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "63a588ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install pyyaml # Not sure if this is needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ff07577c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.7.16\n"
     ]
    }
   ],
   "source": [
    "# Confirm python version is compatible with pupil apriltag library before running script\n",
    "from platform import python_version\n",
    "print(python_version())\n",
    "# 3.7.16 works for pupil apriltag library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "46b34a25",
   "metadata": {},
   "outputs": [],
   "source": [
    "# EVERYTHING BELOW THIS CELL CAN BE COPY/PASTED INTO THE FINAL PYTHON SCRIPT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "31f9556c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# IMPORT CODE\n",
    "import cv2\n",
    "from pupil_apriltags import Detector\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bce43341",
   "metadata": {},
   "outputs": [],
   "source": [
    "# INITIALIZATION CODE\n",
    "    \n",
    "# Camera Calibration Data\n",
    "# Kohya's Laptop (delete when replaced with raspberry pi calibration data)\n",
    "fxcal = 938.61258241\n",
    "fycal = 937.70826823\n",
    "cxcal = 669.06224346\n",
    "cycal = 379.28535514\n",
    "tag_size = .1075\n",
    "cap = cv2.VideoCapture(0) # webcam reference\n",
    "cap.set(3, 1280)\n",
    "cap.set(4, 720)\n",
    "\n",
    "# Check if opened correctly\n",
    "if not cap.isOpened():\n",
    "    raise IOError(\"Cannot open webcam\")\n",
    "\n",
    "# Add Raspberry Pi Calibration Data Here\n",
    "# fxcal = \n",
    "# fycal = \n",
    "# cxcal = \n",
    "# cycal = \n",
    "# tag_size = .1075\n",
    "# cap = cv2.VideoCapture(0)\n",
    "# cap.set(3, 1280)\n",
    "# cap.set(4, 720)\n",
    "    \n",
    "# initialize detector\n",
    "at_detector = Detector(\n",
    "    families=\"tag36h11\",\n",
    "    nthreads=1,\n",
    "    quad_decimate=1.0,\n",
    "    quad_sigma=0.0,\n",
    "    refine_edges=1,\n",
    "    decode_sharpening=0.25,\n",
    "    debug=0\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "19d624af",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x:  [0.0497256] y:  [0.01720005] z:  [-0.40131547] yaw:  -0.06215019874549493\r"
     ]
    }
   ],
   "source": [
    "# EACH TIME DATA NEEDS TO BE ACQUIRED EXECUTE CODE BELOW\n",
    "ret, frame = cap.read() # ret = True for capture success, if success is stored in frame\n",
    "frame = cv2.resize(frame, None, fx=1, fy=1, interpolation=cv2.INTER_AREA) # frame is each image from webcam\n",
    "gray_img = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "tags = at_detector.detect(gray_img, estimate_tag_pose=True, camera_params=(fxcal, fycal, cxcal, cycal), tag_size=tag_size)\n",
    "for tag in tags:\n",
    "    pose_r = tag.pose_R\n",
    "    pose_t = -tag.pose_t\n",
    "    pitch = np.arcsin(-pose_r[2,0]) # pitch dependent on tag orientation\n",
    "#     roll = np.arcsin(pose_r[2,1]/np.cos(pitch)) # roll depedent on tag orientation\n",
    "    yaw = np.arcsin(pose_r[1,0]/np.cos(pitch))\n",
    "\n",
    "    arr1 = np.array(pose_r)\n",
    "    cpose_r = np.linalg.inv(arr1)\n",
    "    cpose_t = np.array(-1*pose_t)\n",
    "    tframepose_t = np.matmul(cpose_r, cpose_t)\n",
    "    cframepose_t = -tframepose_t\n",
    "    yawarray = np.array([[np.cos(yaw), -np.sin(yaw), 0], [np.sin(yaw), np.cos(yaw), 0], [0, 0, 1]])\n",
    "    position = np.matmul(np.linalg.inv(yawarray), cframepose_t)\n",
    "    \n",
    "    \n",
    "    print('x: ', position[0], 'y: ', position[1], 'z: ', position[2], 'yaw: ', -yaw, end='\\r') # Delete this after script testing is complete"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dc3a82ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# AT THE END OF THE PROGRAM\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2fd6ad3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:apriltag37]",
   "language": "python",
   "name": "conda-env-apriltag37-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
